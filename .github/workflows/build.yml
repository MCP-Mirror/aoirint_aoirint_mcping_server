name: Build

on:
  push:
    branches:
      - main
  release:
    types:
      - created
  workflow_dispatch:

env:
  IMAGE_NAME_PREFIX: aoirint/aoirint_mcping_server
  IMAGE_TAG: ${{ github.event.release.tag_name != '' && github.event.release.tag_name || 'latest' }}
  PYTHON_VERSION: '3.10.10'

jobs:
  docker-build-and-push:
    strategy:
      fail-fast: false
      matrix:
        include:
          -
            base_image: 'ubuntu:focal'
            base_runtime_image: 'ubuntu:focal'
            image_name_suffix: 'web_api'
            image_target: 'web-api-runtime-env'
          -
            base_image: 'ubuntu:focal'
            base_runtime_image: 'ubuntu:focal'
            image_name_suffix: 'bedrock_updater'
            image_target: 'bedrock-updater-runtime-env'
          -
            base_image: 'ubuntu:focal'
            base_runtime_image: 'ubuntu:focal'
            image_name_suffix: 'java_updater'
            image_target: 'java-updater-runtime-env'

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Deploy Docker image
        uses: docker/build-push-action@v3
        env:
          IMAGE_NAME_AND_TAG: ${{ format('{0}_{1}:{2}', env.IMAGE_NAME_PREFIX, matrix.image_name_suffix, env.IMAGE_TAG) }}
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile
          push: true
          target: ${{ matrix.image_target }}
          tags: ${{ env.IMAGE_NAME_AND_TAG }}
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            BASE_RUNTIME_IMAGE=${{ matrix.base_runtime_image }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME_AND_TAG }}-buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME_AND_TAG }}-buildcache,mode=max

  release-binary:
    if: github.event.release.tag_name != ''

    strategy:
      fail-fast: false
      matrix:
        include:
          -
            os: 'ubuntu-20.04'
            asset_name: aoirint_mcping_server-linux-amd64.tgz
            sed: 'sed'
          -
            os: 'windows-2019'
            asset_name: aoirint_mcping_server-windows-amd64.zip
            sed: 'sed'
          -
            os: 'macos-11'
            asset_name: aoirint_mcping_server-macos-amd64.zip
            sed: 'gsed'

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PYTHON_VERSION }}"
          cache: 'pip'
          cache-dependency-path: '**/requirements-dev.txt'

      - name: Install Dependencies
        run: |
          pip3 install -r requirements-dev.txt

      - name: Install gsed for macOS
        if: startsWith(matrix.os, 'macos-')
        run: |
          brew install gnu-sed

      - name: Replace Version
        run: |
          ${{ matrix.sed }} -i 's/__VERSION__ = "0.0.0"/__VERSION__ = "${{ env.VERSION }}"/' aoirint_mcping_server/__init__.py

      - name: Build Binary
        run: |
          pyinstaller --name "aoirint_mcping_server_web_api" --onefile "aoirint_mcping_server_web_api.py"
          pyinstaller --name "aoirint_mcping_server_bedrock_updater" --onefile "aoirint_mcping_server_bedrock_updater.py"
          pyinstaller --name "aoirint_mcping_server_java_updater" --onefile "aoirint_mcping_server_java_updater.py"

      - name: Create artifact directory for Linux / macOS
        if: startsWith(matrix.os, 'ubuntu-') || startsWith(matrix.os, 'macos-') 
        run: |
          mkdir artifact

          cp dist/aoirint_mcping_server_web_api artifact/
          cp dist/aoirint_mcping_server_bedrock_updater artifact/
          cp dist/aoirint_mcping_server_java_updater artifact/

      - name: Create artifact directory for Windows
        if: startsWith(matrix.os, 'windows-')
        run: |
          mkdir artifact

          cp dist/aoirint_mcping_server_web_api.exe artifact/
          cp dist/aoirint_mcping_server_bedrock_updater.exe artifact/
          cp dist/aoirint_mcping_server_java_updater.exe artifact/

      - name: Compress tgz
        if: endsWith(matrix.asset_name, '.tgz')
        run: |
          cd artifact
          tar czfv "../${{ matrix.asset_name }}" .

      - name: Compress zip
        if: endsWith(matrix.asset_name, '.zip')
        run: |
          cd artifact
          zip -rv "../${{ matrix.asset_name }}" .

      - name: Upload Binary to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.asset_name }}
          tag: ${{ github.ref }}
